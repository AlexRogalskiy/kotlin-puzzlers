explain bugs/nan

* mockk() { var } vs local var - which one is taken?
* crossinline
* sealed class with open sibling, and another class that extends it
* How to resolve overload ambiguity in method references?
* Property annotations - where do they get?
* file.listFiles().filter { it.endsWith(".xml") } not same as it.name.endsWith(".xml")
* !it.geoTagged.apply { if (this) print("true") } vs (!it.geoTagged).apply { if (this) print("true") }
* Something with in/out generics?
* Coroutines? e.g. delay() in restricted suspension?
* fun foo(f: () -> String = fun() = "hh") = f()
* kotlin.Unit vs kotlin.UInt


Some more obscure features:
* overridden open method is also open by default, can be declared final
* cannot call super of extension function
* inner non-static class (inner keyword)
* syntax: type String -> () -> () -> String
* inline function, noinline parameter (to e.g. pass futher)

Kotlin/JS:
* cannot have a class name with spaces in ``
* no way to create instance of KClass/JsClass (workaround: js("new constructor()"))
* accessing of protected fields in companion object from subclass is "not supported", but compiles with @JvmStatic and fails at runtime
